{"version":3,"file":"src_app_modules_admin_ui_icons_icons_routes_ts.js","mappings":"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","sources":["./src/app/modules/admin/ui/icons/icons.component.ts","./src/app/modules/admin/ui/icons/icons.component.html","./src/app/modules/admin/ui/icons/icons.routes.ts","./src/app/modules/admin/ui/icons/icons.service.ts"],"sourcesContent":["import { AsyncPipe, NgClass, NgFor, NgIf } from '@angular/common';\nimport { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatOptionModule } from '@angular/material/core';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { FuseHighlightComponent } from '@fuse/components/highlight';\nimport { IconsService } from 'app/modules/admin/ui/icons/icons.service';\nimport { Icon } from 'app/modules/admin/ui/icons/icons.types';\nimport { BehaviorSubject, combineLatest, map, Observable, Subject, takeUntil } from 'rxjs';\n\n@Component({\n    selector     : 'icons',\n    templateUrl  : './icons.component.html',\n    encapsulation: ViewEncapsulation.None,\n    standalone   : true,\n    imports      : [MatIconModule, NgIf, FuseHighlightComponent, MatFormFieldModule, MatInputModule, MatSelectModule, FormsModule, MatOptionModule, NgFor, NgClass, AsyncPipe],\n})\nexport class IconsComponent implements OnInit, OnDestroy\n{\n    icons$: Observable<Icon>;\n    filteredIcons$: Observable<Icon>;\n    filterValue$: BehaviorSubject<string> = new BehaviorSubject('');\n\n    iconSize: string = 'icon-size-8';\n    selectedIcon: string[];\n    private _unsubscribeAll: Subject<any> = new Subject();\n\n    /**\n     * Constructor\n     */\n    constructor(private _iconsService: IconsService)\n    {\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        // Get the icons\n        this.icons$ = this._iconsService.icons;\n\n        // Subscribe to icons\n        this._iconsService.icons\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe((icons) =>\n            {\n                // Set the icon size in case the icon set\n                // has a special base grid size\n                this.iconSize = icons.grid;\n\n                // Select the first icon\n                this.selectedIcon = [icons.namespace, icons.list[0]];\n            });\n\n        // Create filtered icons\n        this.filteredIcons$ = combineLatest([this.icons$, this.filterValue$])\n            .pipe(\n                map(([icons, filterValue]) =>\n                {\n                    // Filter the icons\n                    const filteredIcons = icons.list.filter(icon => icon.toLowerCase().includes(filterValue.toLowerCase()));\n\n                    // Update the list with the filtered icons\n                    return {\n                        ...icons,\n                        list: filteredIcons,\n                    };\n                }),\n            );\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void\n    {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next(null);\n        this._unsubscribeAll.complete();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Filter icons\n     *\n     * @param event\n     */\n    filterIcons(event: any): void\n    {\n        // Push the value to the observable\n        this.filterValue$.next(event.target.value);\n    }\n\n    /**\n     * Select an icon\n     *\n     * @param namespace\n     * @param icon\n     */\n    selectIcon(namespace: string, icon: string): void\n    {\n        this.selectedIcon = [\n            namespace,\n            icon,\n        ];\n    }\n\n    /**\n     * Returns the selected icon's svgIcon\n     * to use in mat-icon component\n     */\n    calcSvgIconAttr(): string\n    {\n        if ( !this.selectedIcon )\n        {\n            return '';\n        }\n\n        if ( this.selectedIcon[0] === '' )\n        {\n            return this.selectedIcon[1];\n        }\n\n        return this.selectedIcon.join(':');\n    }\n}\n","<div class=\"flex flex-col flex-auto min-w-0\">\n\n    <!-- Header -->\n    <div class=\"flex flex-col sm:flex-row flex-0 sm:items-center sm:justify-between p-6 sm:py-8 sm:px-10 border-b bg-card dark:bg-transparent\">\n        <div class=\"flex-1 min-w-0\">\n            <!-- Breadcrumbs -->\n            <div class=\"flex flex-wrap items-center font-medium\">\n                <div>\n                    <a class=\"whitespace-nowrap text-primary-500\">User Interface</a>\n                </div>\n                <div class=\"flex items-center ml-1 whitespace-nowrap\">\n                    <mat-icon\n                        class=\"icon-size-5 text-secondary\"\n                        [svgIcon]=\"'heroicons_mini:chevron-right'\"></mat-icon>\n                    <a class=\"ml-1 text-primary-500\">Icons</a>\n                </div>\n            </div>\n            <!-- Title -->\n            <div class=\"mt-2\">\n                <h2 class=\"text-3xl md:text-4xl font-extrabold tracking-tight leading-7 sm:leading-10 truncate\">\n                    <ng-container *ngIf=\"(icons$ | async) as icons\">\n                        <h1>{{icons.name}}</h1>\n                    </ng-container>\n                </h2>\n            </div>\n        </div>\n    </div>\n\n    <!-- Main -->\n    <div class=\"flex-auto p-6 sm:p-10\">\n\n        <div class=\"prose prose-sm max-w-5xl\">\n\n            <h2>Usage</h2>\n            <ng-container *ngIf=\"(filteredIcons$ | async) as icons\">\n                <textarea\n                    fuse-highlight\n                    lang=\"html\"\n                    [code]=\"'<mat-icon svgIcon=&#34;' + calcSvgIconAttr() + '&#34;></mat-icon>'\"></textarea>\n            </ng-container>\n\n            <h2>Icons</h2>\n            <div class=\"flex my-6 xs:flex-col\">\n                <mat-form-field class=\"flex-auto\">\n                    <mat-label>Search an icon</mat-label>\n                    <input\n                        matInput\n                        [attr.autocomplete]=\"'off'\"\n                        (input)=\"filterIcons($event)\">\n                </mat-form-field>\n                <mat-form-field class=\"min-w-40 ml-8 xs:ml-0\">\n                    <mat-label>Icon size</mat-label>\n                    <mat-select [(ngModel)]=\"iconSize\">\n                        <mat-option [value]=\"'icon-size-4'\">16</mat-option>\n                        <mat-option [value]=\"'icon-size-5'\">20</mat-option>\n                        <mat-option [value]=\"'icon-size-6'\">24</mat-option>\n                        <mat-option [value]=\"'icon-size-8'\">32</mat-option>\n                        <mat-option [value]=\"'icon-size-10'\">40</mat-option>\n                        <mat-option [value]=\"'icon-size-12'\">48</mat-option>\n                        <mat-option [value]=\"'icon-size-16'\">64</mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n\n            <div class=\"flex flex-wrap -mx-4\">\n\n                <ng-container *ngIf=\"(filteredIcons$ | async) as icons\">\n\n                    <ng-container *ngFor=\"let icon of icons.list\">\n\n                        <div\n                            class=\"flex flex-col items-center justify-center m-4 p-4 min-w-36 max-w-36 min-h-30 max-h-30 rounded border-2 cursor-pointer bg-card\"\n                            [class.border-primary]=\"selectedIcon[1] === icon\"\n                            (click)=\"selectIcon(icons.namespace, icon)\">\n\n                            <div class=\"flex items-center justify-center mb-3\">\n                                <mat-icon\n                                    [ngClass]=\"iconSize\"\n                                    [svgIcon]=\"icons.namespace + ':' + icon\"></mat-icon>\n                            </div>\n\n                            <div class=\"text-sm text-center break-all text-secondary\">{{icon}}</div>\n\n                        </div>\n\n                    </ng-container>\n\n                </ng-container>\n\n            </div>\n\n        </div>\n\n    </div>\n\n</div>\n","import { inject } from '@angular/core';\nimport { ActivatedRouteSnapshot, RouterStateSnapshot, Routes } from '@angular/router';\nimport { IconsComponent } from 'app/modules/admin/ui/icons/icons.component';\nimport { IconsService } from 'app/modules/admin/ui/icons/icons.service';\n\nexport default [\n    {\n        // Redirect /icons to /icons/material-twotone\n        path      : '',\n        pathMatch : 'full',\n        redirectTo: 'material-twotone',\n    },\n    {\n        path     : '**',\n        component: IconsComponent,\n        resolve  : {\n            icons: (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => inject(IconsService).getIcons(state.url),\n        },\n    },\n] as Routes;\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\n\n@Injectable({providedIn: 'root'})\nexport class IconsService\n{\n    // Private\n    private _icons: BehaviorSubject<any> = new BehaviorSubject(null);\n\n    /**\n     * Constructor\n     */\n    constructor(private _httpClient: HttpClient)\n    {\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Accessors\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Getter for icons\n     */\n    get icons(): Observable<any>\n    {\n        return this._icons.asObservable();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Get icons\n     *\n     * @param url\n     */\n    getIcons(url: string): Observable<any>\n    {\n        // Prepend the url with 'api'\n        url = 'api' + url;\n\n        return this._httpClient.get(url).pipe(\n            tap((response: any) =>\n            {\n                this._icons.next(response);\n            }),\n        );\n    }\n}\n"],"names":["AsyncPipe","NgClass","NgFor","NgIf","FormsModule","MatOptionModule","MatFormFieldModule","MatIconModule","MatInputModule","MatSelectModule","FuseHighlightComponent","BehaviorSubject","combineLatest","map","Subject","takeUntil","i0","ɵɵelementContainerStart","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelementContainerEnd","ɵɵadvance","ɵɵtextInterpolate","icons_r3","name","ɵɵelement","ɵɵproperty","ctx_r1","calcSvgIconAttr","ɵɵlistener","IconsComponent_ng_container_47_ng_container_1_Template_div_click_1_listener","restoredCtx","ɵɵrestoreView","_r10","icon_r7","$implicit","icons_r5","ɵɵnextContext","ngIf","ctx_r8","ɵɵresetView","selectIcon","namespace","ɵɵclassProp","ctx_r6","selectedIcon","iconSize","ɵɵtemplate","IconsComponent_ng_container_47_ng_container_1_Template","list","IconsComponent","constructor","_iconsService","filterValue$","_unsubscribeAll","ngOnInit","icons$","icons","pipe","subscribe","grid","filteredIcons$","filterValue","filteredIcons","filter","icon","toLowerCase","includes","ngOnDestroy","next","complete","filterIcons","event","target","value","join","_","ɵɵdirectiveInject","i1","IconsService","_2","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","IconsComponent_Template","rf","ctx","IconsComponent_ng_container_13_Template","IconsComponent_ng_container_19_Template","IconsComponent_Template_input_input_27_listener","$event","IconsComponent_Template_mat_select_ngModelChange_31_listener","IconsComponent_ng_container_47_Template","ɵɵpipeBind1","ɵɵattribute","i2","MatIcon","i3","MatFormField","MatLabel","i4","MatInput","i5","MatSelect","i6","MatOption","i7","NgControlStatus","NgModel","encapsulation","inject","path","pathMatch","redirectTo","component","resolve","route","state","getIcons","url","tap","_httpClient","_icons","asObservable","get","response","ɵɵinject","HttpClient","factory","ɵfac","providedIn"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}