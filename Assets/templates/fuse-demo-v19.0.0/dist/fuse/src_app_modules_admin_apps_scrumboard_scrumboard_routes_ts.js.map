{"version":3,"file":"src_app_modules_admin_apps_scrumboard_scrumboard_routes_ts.js","mappings":"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","sources":["./src/app/modules/admin/apps/scrumboard/board/add-card/add-card.component.ts","./src/app/modules/admin/apps/scrumboard/board/add-card/add-card.component.html","./src/app/modules/admin/apps/scrumboard/board/add-list/add-list.component.ts","./src/app/modules/admin/apps/scrumboard/board/add-list/add-list.component.html","./src/app/modules/admin/apps/scrumboard/board/board.component.ts","./src/app/modules/admin/apps/scrumboard/board/board.component.html","./src/app/modules/admin/apps/scrumboard/boards/boards.component.ts","./src/app/modules/admin/apps/scrumboard/boards/boards.component.html","./src/app/modules/admin/apps/scrumboard/card/card.component.ts","./src/app/modules/admin/apps/scrumboard/card/card.component.html","./src/app/modules/admin/apps/scrumboard/card/details/details.component.ts","./src/app/modules/admin/apps/scrumboard/card/details/details.component.html","./src/app/modules/admin/apps/scrumboard/scrumboard.models.ts","./src/app/modules/admin/apps/scrumboard/scrumboard.routes.ts","./src/app/modules/admin/apps/scrumboard/scrumboard.service.ts"],"sourcesContent":["import { CdkTextareaAutosize, TextFieldModule } from '@angular/cdk/text-field';\nimport { NgClass } from '@angular/common';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule, UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\n@Component({\n    selector       : 'scrumboard-board-add-card',\n    templateUrl    : './add-card.component.html',\n    encapsulation  : ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    standalone     : true,\n    imports        : [MatButtonModule, NgClass, MatIconModule, FormsModule, ReactiveFormsModule, TextFieldModule],\n})\nexport class ScrumboardBoardAddCardComponent implements OnInit\n{\n    @ViewChild('titleInput') titleInput: ElementRef;\n    @ViewChild('titleAutosize') titleAutosize: CdkTextareaAutosize;\n    @Input() buttonTitle: string = 'Add a card';\n    @Output() readonly saved: EventEmitter<string> = new EventEmitter<string>();\n\n    form: UntypedFormGroup;\n    formVisible: boolean = false;\n\n    /**\n     * Constructor\n     */\n    constructor(\n        private _changeDetectorRef: ChangeDetectorRef,\n        private _formBuilder: UntypedFormBuilder,\n    )\n    {\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        // Initialize the new list form\n        this.form = this._formBuilder.group({\n            title: [''],\n        });\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Save\n     */\n    save(): void\n    {\n        // Get the new list title\n        const title = this.form.get('title').value;\n\n        // Return, if the title is empty\n        if ( !title || title.trim() === '' )\n        {\n            return;\n        }\n\n        // Execute the observable\n        this.saved.next(title.trim());\n\n        // Clear the new list title and hide the form\n        this.formVisible = false;\n        this.form.get('title').setValue('');\n\n        // Reset the size of the textarea\n        setTimeout(() =>\n        {\n            this.titleInput.nativeElement.value = '';\n            this.titleAutosize.reset();\n        });\n\n        // Mark for check\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Toggle the visibility of the form\n     */\n    toggleFormVisibility(): void\n    {\n        // Toggle the visibility\n        this.formVisible = !this.formVisible;\n\n        // If the form becomes visible, focus on the title field\n        if ( this.formVisible )\n        {\n            this.titleInput.nativeElement.focus();\n        }\n    }\n}\n","<div\n    class=\"p-3 pt-0\"\n    [class.h-13]=\"!formVisible\">\n    <div class=\"relative flex w-full h-full rounded-lg\">\n        <button\n            class=\"absolute inset-0 justify-start w-full rounded-lg\"\n            [ngClass]=\"{'opacity-0 pointer-events-none': formVisible}\"\n            mat-button\n            (click)=\"toggleFormVisibility()\"\n            disableRipple>\n            <mat-icon\n                class=\"icon-size-5\"\n                [svgIcon]=\"'heroicons_outline:plus-circle'\"></mat-icon>\n            <span class=\"ml-2 text-secondary\">{{buttonTitle}}</span>\n        </button>\n        <form\n            class=\"flex flex-col items-start w-full\"\n            [ngClass]=\"{'opacity-0': !formVisible}\"\n            [formGroup]=\"form\">\n            <div class=\"flex w-full p-5 rounded-lg shadow bg-card\">\n                <textarea\n                    class=\"w-full text-lg font-medium leading-5\"\n                    [spellcheck]=\"'off'\"\n                    [formControlName]=\"'title'\"\n                    [placeholder]=\"'Enter card title...'\"\n                    (keydown.enter)=\"save()\"\n                    cdkTextareaAutosize\n                    #titleInput\n                    #titleAutosize=\"cdkTextareaAutosize\">\n                </textarea>\n            </div>\n            <div class=\"flex items-center mt-2\">\n                <button\n                    class=\"h-8 min-h-8\"\n                    mat-flat-button\n                    [color]=\"'primary'\"\n                    [type]=\"'button'\"\n                    (click)=\"save()\">\n                    Add card\n                </button>\n                <button\n                    class=\"ml-1 w-8 h-8 min-h-8\"\n                    mat-icon-button\n                    [type]=\"'button'\"\n                    (click)=\"toggleFormVisibility()\">\n                    <mat-icon\n                        class=\"icon-size-4\"\n                        [svgIcon]=\"'heroicons_solid:x-mark'\"></mat-icon>\n                </button>\n            </div>\n        </form>\n    </div>\n</div>\n","import { NgClass } from '@angular/common';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule, UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\n@Component({\n    selector       : 'scrumboard-board-add-list',\n    templateUrl    : './add-list.component.html',\n    encapsulation  : ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    standalone     : true,\n    imports        : [MatButtonModule, NgClass, MatIconModule, FormsModule, ReactiveFormsModule],\n})\nexport class ScrumboardBoardAddListComponent implements OnInit\n{\n    @ViewChild('titleInput') titleInput: ElementRef;\n    @Input() buttonTitle: string = 'Add a list';\n    @Output() readonly saved: EventEmitter<string> = new EventEmitter<string>();\n\n    form: UntypedFormGroup;\n    formVisible: boolean = false;\n\n    /**\n     * Constructor\n     */\n    constructor(\n        private _changeDetectorRef: ChangeDetectorRef,\n        private _formBuilder: UntypedFormBuilder,\n    )\n    {\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        // Initialize the new list form\n        this.form = this._formBuilder.group({\n            title: [''],\n        });\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Save\n     */\n    save(): void\n    {\n        // Get the new list title\n        const title = this.form.get('title').value;\n\n        // Return, if the title is empty\n        if ( !title || title.trim() === '' )\n        {\n            return;\n        }\n\n        // Execute the observable\n        this.saved.next(title.trim());\n\n        // Clear the new list title and hide the form\n        this.form.get('title').setValue('');\n        this.formVisible = false;\n\n        // Mark for check\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Toggle the visibility of the form\n     */\n    toggleFormVisibility(): void\n    {\n        // Toggle the visibility\n        this.formVisible = !this.formVisible;\n\n        // If the form becomes visible, focus on the title field\n        if ( this.formVisible )\n        {\n            this.titleInput.nativeElement.focus();\n        }\n    }\n}\n","<div\n    class=\"mt-11 w-64 py-2.5 px-2\"\n    [class.h-15]=\"!formVisible\">\n    <div class=\"relative flex w-full h-full overflow-hidden rounded-xl bg-gray-200 dark:bg-gray-700\">\n        <button\n            class=\"absolute inset-0 justify-start w-full px-3 rounded-xl bg-transparent\"\n            [ngClass]=\"{'opacity-0 pointer-events-none': formVisible}\"\n            mat-button\n            (click)=\"toggleFormVisibility()\"\n            disableRipple>\n            <mat-icon\n                class=\"icon-size-5\"\n                [svgIcon]=\"'heroicons_outline:plus-circle'\"></mat-icon>\n            <span class=\"ml-2 text-secondary\">{{buttonTitle}}</span>\n        </button>\n        <form\n            class=\"flex flex-col items-start w-full p-3\"\n            [ngClass]=\"{'opacity-0': !formVisible}\"\n            [formGroup]=\"form\">\n            <input\n                class=\"w-full py-2 px-3 leading-5 rounded-md shadow-sm border border-gray-300 bg-white focus:border-primary dark:border-gray-500 dark:focus:border-primary dark:bg-black dark:bg-opacity-5\"\n                [autocomplete]=\"'off'\"\n                [formControlName]=\"'title'\"\n                [placeholder]=\"'Enter list title...'\"\n                (keydown.enter)=\"save()\"\n                #titleInput>\n            <div class=\"flex items-center mt-2\">\n                <button\n                    class=\"h-8 min-h-8\"\n                    mat-flat-button\n                    [color]=\"'primary'\"\n                    [type]=\"'button'\"\n                    (click)=\"save()\">\n                    Add list\n                </button>\n                <button\n                    class=\"ml-1 w-8 h-8 min-h-8\"\n                    mat-icon-button\n                    [type]=\"'button'\"\n                    (click)=\"toggleFormVisibility()\">\n                    <mat-icon\n                        class=\"icon-size-4\"\n                        [svgIcon]=\"'heroicons_solid:x-mark'\"></mat-icon>\n                </button>\n            </div>\n        </form>\n    </div>\n</div>\n","import { CdkDrag, CdkDragDrop, CdkDragHandle, CdkDropList, CdkDropListGroup, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\nimport { CdkScrollable } from '@angular/cdk/scrolling';\nimport { DatePipe, NgClass, NgFor, NgIf } from '@angular/common';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { RouterLink, RouterOutlet } from '@angular/router';\nimport { FuseConfirmationService } from '@fuse/services/confirmation';\nimport { Board, Card, List } from 'app/modules/admin/apps/scrumboard/scrumboard.models';\nimport { ScrumboardService } from 'app/modules/admin/apps/scrumboard/scrumboard.service';\nimport { DateTime } from 'luxon';\nimport { Subject, takeUntil } from 'rxjs';\nimport { ScrumboardBoardAddCardComponent } from './add-card/add-card.component';\nimport { ScrumboardBoardAddListComponent } from './add-list/add-list.component';\n\n@Component({\n    selector       : 'scrumboard-board',\n    templateUrl    : './board.component.html',\n    styleUrls      : ['./board.component.scss'],\n    encapsulation  : ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    standalone     : true,\n    imports        : [MatButtonModule, RouterLink, MatIconModule, CdkScrollable, CdkDropList, CdkDropListGroup, NgFor, CdkDrag, CdkDragHandle, MatMenuModule, NgIf, NgClass, ScrumboardBoardAddCardComponent, ScrumboardBoardAddListComponent, RouterOutlet, DatePipe],\n})\nexport class ScrumboardBoardComponent implements OnInit, OnDestroy\n{\n    board: Board;\n    listTitleForm: UntypedFormGroup;\n\n    // Private\n    private readonly _positionStep: number = 65536;\n    private readonly _maxListCount: number = 200;\n    private readonly _maxPosition: number = this._positionStep * 500;\n    private _unsubscribeAll: Subject<any> = new Subject<any>();\n\n    /**\n     * Constructor\n     */\n    constructor(\n        private _changeDetectorRef: ChangeDetectorRef,\n        private _formBuilder: UntypedFormBuilder,\n        private _fuseConfirmationService: FuseConfirmationService,\n        private _scrumboardService: ScrumboardService,\n    )\n    {\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        // Initialize the list title form\n        this.listTitleForm = this._formBuilder.group({\n            title: [''],\n        });\n\n        // Get the board\n        this._scrumboardService.board$\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe((board: Board) =>\n            {\n                this.board = {...board};\n\n                // Mark for check\n                this._changeDetectorRef.markForCheck();\n            });\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void\n    {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next(null);\n        this._unsubscribeAll.complete();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Focus on the given element to start editing the list title\n     *\n     * @param listTitleInput\n     */\n    renameList(listTitleInput: HTMLElement): void\n    {\n        // Use timeout so it can wait for menu to close\n        setTimeout(() =>\n        {\n            listTitleInput.focus();\n        });\n    }\n\n    /**\n     * Add new list\n     *\n     * @param title\n     */\n    addList(title: string): void\n    {\n        // Limit the max list count\n        if ( this.board.lists.length >= this._maxListCount )\n        {\n            return;\n        }\n\n        // Create a new list model\n        const list = new List({\n            boardId : this.board.id,\n            position: this.board.lists.length ? this.board.lists[this.board.lists.length - 1].position + this._positionStep : this._positionStep,\n            title   : title,\n        });\n\n        // Save the list\n        this._scrumboardService.createList(list).subscribe();\n    }\n\n    /**\n     * Update the list title\n     *\n     * @param event\n     * @param list\n     */\n    updateListTitle(event: any, list: List): void\n    {\n        // Get the target element\n        const element: HTMLInputElement = event.target;\n\n        // Get the new title\n        const newTitle = element.value;\n\n        // If the title is empty...\n        if ( !newTitle || newTitle.trim() === '' )\n        {\n            // Reset to original title and return\n            element.value = list.title;\n            return;\n        }\n\n        // Update the list title and element value\n        list.title = element.value = newTitle.trim();\n\n        // Update the list\n        this._scrumboardService.updateList(list).subscribe();\n    }\n\n    /**\n     * Delete the list\n     *\n     * @param id\n     */\n    deleteList(id): void\n    {\n        // Open the confirmation dialog\n        const confirmation = this._fuseConfirmationService.open({\n            title  : 'Delete list',\n            message: 'Are you sure you want to delete this list and its cards? This action cannot be undone!',\n            actions: {\n                confirm: {\n                    label: 'Delete',\n                },\n            },\n        });\n\n        // Subscribe to the confirmation dialog closed action\n        confirmation.afterClosed().subscribe((result) =>\n        {\n            // If the confirm button pressed...\n            if ( result === 'confirmed' )\n            {\n                // Delete the list\n                this._scrumboardService.deleteList(id).subscribe();\n            }\n        });\n    }\n\n    /**\n     * Add new card\n     */\n    addCard(list: List, title: string): void\n    {\n        // Create a new card model\n        const card = new Card({\n            boardId : this.board.id,\n            listId  : list.id,\n            position: list.cards.length ? list.cards[list.cards.length - 1].position + this._positionStep : this._positionStep,\n            title   : title,\n        });\n\n        // Save the card\n        this._scrumboardService.createCard(card).subscribe();\n    }\n\n    /**\n     * List dropped\n     *\n     * @param event\n     */\n    listDropped(event: CdkDragDrop<List[]>): void\n    {\n        // Move the item\n        moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n\n        // Calculate the positions\n        const updated = this._calculatePositions(event);\n\n        // Update the lists\n        this._scrumboardService.updateLists(updated).subscribe();\n    }\n\n    /**\n     * Card dropped\n     *\n     * @param event\n     */\n    cardDropped(event: CdkDragDrop<Card[]>): void\n    {\n        // Move or transfer the item\n        if ( event.previousContainer === event.container )\n        {\n            // Move the item\n            moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n        }\n        else\n        {\n            // Transfer the item\n            transferArrayItem(event.previousContainer.data, event.container.data, event.previousIndex, event.currentIndex);\n\n            // Update the card's list it\n            event.container.data[event.currentIndex].listId = event.container.id;\n        }\n\n        // Calculate the positions\n        const updated = this._calculatePositions(event);\n\n        // Update the cards\n        this._scrumboardService.updateCards(updated).subscribe();\n    }\n\n    /**\n     * Check if the given ISO_8601 date string is overdue\n     *\n     * @param date\n     */\n    isOverdue(date: string): boolean\n    {\n        return DateTime.fromISO(date).startOf('day') < DateTime.now().startOf('day');\n    }\n\n    /**\n     * Track by function for ngFor loops\n     *\n     * @param index\n     * @param item\n     */\n    trackByFn(index: number, item: any): any\n    {\n        return item.id || index;\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Private methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Calculate and set item positions\n     * from given CdkDragDrop event\n     *\n     * @param event\n     * @private\n     */\n    private _calculatePositions(event: CdkDragDrop<any[]>): any[]\n    {\n        // Get the items\n        let items = event.container.data;\n        const currentItem = items[event.currentIndex];\n        const prevItem = items[event.currentIndex - 1] || null;\n        const nextItem = items[event.currentIndex + 1] || null;\n\n        // If the item moved to the top...\n        if ( !prevItem )\n        {\n            // If the item moved to an empty container\n            if ( !nextItem )\n            {\n                currentItem.position = this._positionStep;\n            }\n            else\n            {\n                currentItem.position = nextItem.position / 2;\n            }\n        }\n        // If the item moved to the bottom...\n        else if ( !nextItem )\n        {\n            currentItem.position = prevItem.position + this._positionStep;\n        }\n        // If the item moved in between other items...\n        else\n        {\n            currentItem.position = (prevItem.position + nextItem.position) / 2;\n        }\n\n        // Check if all item positions need to be updated\n        if ( !Number.isInteger(currentItem.position) || currentItem.position >= this._maxPosition )\n        {\n            // Re-calculate all orders\n            items = items.map((value, index) =>\n            {\n                value.position = (index + 1) * this._positionStep;\n                return value;\n            });\n\n            // Return items\n            return items;\n        }\n\n        // Return currentItem\n        return [currentItem];\n    }\n}\n","<div class=\"absolute inset-0 flex flex-col min-w-0 overflow-hidden\">\n\n    <!-- Header -->\n    <div class=\"flex flex-col sm:flex-row flex-0 sm:items-center sm:justify-between p-6 sm:py-8 sm:px-10 border-b bg-card dark:bg-transparent\">\n        <!-- Title -->\n        <div class=\"flex-1 min-w-0\">\n            <h2 class=\"text-3xl md:text-4xl font-extrabold tracking-tight leading-7 sm:leading-10 truncate\">\n                {{board.title}}\n            </h2>\n        </div>\n        <!-- Actions -->\n        <div class=\"flex shrink-0 items-center mt-6 sm:mt-0 sm:ml-4\">\n            <a\n                mat-stroked-button\n                [routerLink]=\"['..']\">\n                <mat-icon\n                    class=\"icon-size-5\"\n                    [svgIcon]=\"'heroicons_solid:view-columns'\"></mat-icon>\n                <span class=\"ml-2\">Boards</span>\n            </a>\n            <button\n                class=\"ml-3\"\n                mat-stroked-button>\n                <mat-icon\n                    class=\"icon-size-5\"\n                    [svgIcon]=\"'heroicons_solid:cog-8-tooth'\"></mat-icon>\n                <span class=\"ml-2\">Settings</span>\n            </button>\n        </div>\n    </div>\n\n    <!-- Main -->\n    <div\n        class=\"flex-auto p-6 sm:p-8 sm:pt-4 overflow-y-auto\"\n        cdkScrollable>\n\n        <!-- Lists -->\n        <div\n            class=\"flex\"\n            cdkDropList\n            [cdkDropListData]=\"board.lists\"\n            [cdkDropListOrientation]=\"'horizontal'\"\n            (cdkDropListDropped)=\"listDropped($event)\">\n\n            <!-- Group all cdkDropList's after this point together so that the cards can be transferred between lists -->\n            <div\n                class=\"flex items-start\"\n                cdkDropListGroup>\n\n                <!-- List -->\n                <ng-container *ngFor=\"let list of board.lists; trackBy: trackByFn\">\n                    <div\n                        class=\"flex-0 w-72 p-2 rounded-2xl bg-default\"\n                        cdkDrag\n                        [cdkDragLockAxis]=\"'x'\">\n\n                        <div\n                            class=\"flex items-center justify-between\"\n                            cdkDragHandle>\n                            <div class=\"flex items-center w-full py-2 px-3 rounded-md cursor-text border border-transparent focus-within:bg-white focus-within:shadow-sm focus-within:border-primary dark:focus-within:bg-gray-900\">\n                                <input\n                                    class=\"w-full font-medium leading-5 bg-transparent\"\n                                    [spellcheck]=\"'false'\"\n                                    [value]=\"list.title\"\n                                    (focusout)=\"updateListTitle($event, list)\"\n                                    (keydown.enter)=\"listTitleInput.blur()\"\n                                    #listTitleInput>\n                            </div>\n                            <div class=\"flex items-center justify-center min-w-6 ml-4 text-sm font-semibold leading-6 rounded-full bg-gray-300 text-secondary dark:bg-gray-700\">\n                                {{list.cards.length}}\n                            </div>\n                            <div class=\"ml-1\">\n                                <button\n                                    class=\"w-8 h-8 min-h-8\"\n                                    mat-icon-button\n                                    [matMenuTriggerFor]=\"listMenu\">\n                                    <mat-icon\n                                        class=\"icon-size-5\"\n                                        [svgIcon]=\"'heroicons_solid:ellipsis-vertical'\"></mat-icon>\n                                </button>\n                                <mat-menu #listMenu=\"matMenu\">\n                                    <button\n                                        mat-menu-item\n                                        (click)=\"renameList(listTitleInput)\">\n                                        <mat-icon\n                                            class=\"icon-size-5\"\n                                            [svgIcon]=\"'heroicons_solid:pencil-square'\"></mat-icon>\n                                        Rename list\n                                    </button>\n                                    <button\n                                        mat-menu-item\n                                        (click)=\"deleteList(list.id)\">\n                                        <mat-icon\n                                            class=\"icon-size-5\"\n                                            [svgIcon]=\"'heroicons_solid:trash'\"></mat-icon>\n                                        Delete list\n                                    </button>\n                                </mat-menu>\n                            </div>\n                        </div>\n\n                        <!-- Cards -->\n                        <div class=\"mt-2 rounded-xl bg-gray-400 bg-opacity-12 dark:bg-transparent dark:border\">\n                            <div\n                                [id]=\"list.id\"\n                                class=\"p-3 pb-0\"\n                                cdkDropList\n                                [cdkDropListData]=\"list.cards\"\n                                (cdkDropListDropped)=\"cardDropped($event)\">\n\n                                <!-- Card -->\n                                <ng-container *ngFor=\"let card of list.cards; trackBy: trackByFn\">\n                                    <a\n                                        class=\"flex flex-col items-start mb-3 p-5 space-y-3 shadow rounded-lg overflow-hidden bg-card\"\n                                        [routerLink]=\"['card', card.id]\"\n                                        cdkDrag>\n                                        <!-- Cover image -->\n                                        <ng-container *ngIf=\"card.coverImage\">\n                                            <div class=\"-mx-5 -mt-5 mb-2\">\n                                                <img\n                                                    class=\"w-full object-cover\"\n                                                    [src]=\"card.coverImage\">\n                                            </div>\n                                        </ng-container>\n                                        <!-- Title -->\n                                        <div class=\"text-lg font-medium leading-5\">{{card.title}}</div>\n                                        <!-- Labels -->\n                                        <ng-container *ngIf=\"card.labels.length\">\n                                            <div>\n                                                <div class=\"flex flex-wrap -mx-1 -mb-2\">\n                                                    <ng-container *ngFor=\"let label of card.labels; trackBy: trackByFn\">\n                                                        <div class=\"mx-1 mb-2 py-0.5 px-3 rounded-full text-sm font-medium text-gray-500 bg-gray-100 dark:text-gray-300 dark:bg-gray-700\">\n                                                            {{label.title}}\n                                                        </div>\n                                                    </ng-container>\n                                                </div>\n                                            </div>\n                                        </ng-container>\n                                        <!-- Due date -->\n                                        <ng-container *ngIf=\"card.dueDate\">\n                                            <div\n                                                class=\"flex items-center rounded text-sm font-medium leading-5 text-secondary\"\n                                                [ngClass]=\"{'text-red-600': isOverdue(card.dueDate)}\">\n                                                <mat-icon\n                                                    class=\"icon-size-4 text-current\"\n                                                    [svgIcon]=\"'heroicons_outline:clock'\"></mat-icon>\n                                                <div class=\"ml-1\">\n                                                    {{card.dueDate | date: 'longDate'}}\n                                                </div>\n                                            </div>\n                                        </ng-container>\n                                    </a>\n                                </ng-container>\n                            </div>\n\n                            <!-- New card -->\n                            <scrumboard-board-add-card\n                                (saved)=\"addCard(list, $event)\"\n                                [buttonTitle]=\"list.cards.length ? 'Add another card' : 'Add a card'\">\n                            </scrumboard-board-add-card>\n                        </div>\n                    </div>\n                </ng-container>\n\n                <!-- New list -->\n                <scrumboard-board-add-list\n                    (saved)=\"addList($event)\"\n                    [buttonTitle]=\"board.lists.length ? 'Add another list' : 'Add a list'\">\n                </scrumboard-board-add-list>\n\n            </div>\n\n        </div>\n\n    </div>\n\n</div>\n\n<!-- Invisible router-outlet for ScrumboardCard component -->\n<div class=\"absolute invisible w-0 h-0 opacity-0 pointer-events-none\">\n    <router-outlet></router-outlet>\n</div>\n","import { CdkScrollable } from '@angular/cdk/scrolling';\nimport { NgFor, NgIf } from '@angular/common';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { RouterLink } from '@angular/router';\nimport { Board } from 'app/modules/admin/apps/scrumboard/scrumboard.models';\nimport { ScrumboardService } from 'app/modules/admin/apps/scrumboard/scrumboard.service';\nimport { DateTime } from 'luxon';\nimport { Subject, takeUntil } from 'rxjs';\n\n@Component({\n    selector       : 'scrumboard-boards',\n    templateUrl    : './boards.component.html',\n    encapsulation  : ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    standalone     : true,\n    imports        : [CdkScrollable, NgFor, RouterLink, MatIconModule, NgIf],\n})\nexport class ScrumboardBoardsComponent implements OnInit, OnDestroy\n{\n    boards: Board[];\n\n    // Private\n    private _unsubscribeAll: Subject<any> = new Subject<any>();\n\n    /**\n     * Constructor\n     */\n    constructor(\n        private _changeDetectorRef: ChangeDetectorRef,\n        private _scrumboardService: ScrumboardService,\n    )\n    {\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        // Get the boards\n        this._scrumboardService.boards$\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe((boards: Board[]) =>\n            {\n                this.boards = boards;\n\n                // Mark for check\n                this._changeDetectorRef.markForCheck();\n            });\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void\n    {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next(null);\n        this._unsubscribeAll.complete();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Format the given ISO_8601 date as a relative date\n     *\n     * @param date\n     */\n    formatDateAsRelative(date: string): string\n    {\n        return DateTime.fromISO(date).toRelative();\n    }\n\n    /**\n     * Track by function for ngFor loops\n     *\n     * @param index\n     * @param item\n     */\n    trackByFn(index: number, item: any): any\n    {\n        return item.id || index;\n    }\n}\n","<div\n    class=\"absolute inset-0 flex flex-col min-w-0 overflow-y-auto\"\n    cdkScrollable>\n\n    <!-- Main -->\n    <div class=\"flex flex-col flex-auto items-center p-6 sm:p-10\">\n\n        <!-- Title -->\n        <div class=\"mt-4 md:mt-24 text-3xl md:text-6xl font-extrabold tracking-tight leading-7 sm:leading-10\">\n            Scrumboard Boards\n        </div>\n\n        <!-- Boards -->\n        <div class=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mt-8 md:mt-16\">\n            <ng-container *ngFor=\"let board of boards; trackBy: trackByFn\">\n                <a\n                    class=\"flex flex-col items-start w-56 p-6 rounded-lg shadow bg-card rounded-lg hover:shadow-xl transition-shadow duration-150 ease-in-out\"\n                    [routerLink]=\"[board.id]\">\n                    <div class=\"flex items-center justify-center p-4 rounded-full bg-primary-50 text-primary-700 dark:bg-primary dark:text-on-primary\">\n                        <mat-icon\n                            class=\"text-current\"\n                            [svgIcon]=\"board.icon\"></mat-icon>\n                    </div>\n                    <!-- Title -->\n                    <div class=\"mt-5 text-lg font-medium leading-5\">{{board.title}}</div>\n                    <!-- Description -->\n                    <div class=\"mt-0.5 line-clamp-2 text-secondary\">{{board.description}}</div>\n                    <!-- Members -->\n                    <ng-container *ngIf=\"board.members?.length\">\n                        <div class=\"w-12 h-1 mt-6 border-t-2\"></div>\n                        <div class=\"flex items-center mt-6 -space-x-1.5\">\n                            <ng-container *ngFor=\"let member of board.members.slice(0, 5); trackBy: trackByFn\">\n                                <img\n                                    class=\"flex-0 w-8 h-8 rounded-full ring ring-offset-1 ring-bg-card ring-offset-transparent object-cover\"\n                                    [src]=\"member.avatar\"\n                                    alt=\"Member avatar\">\n                            </ng-container>\n                            <ng-container *ngIf=\"board.members.length > 5\">\n                                <div class=\"flex flex-0 items-center justify-center w-8 h-8 rounded-full ring ring-offset-1 ring-bg-card ring-offset-transparent bg-gray-200 text-gray-500\">\n                                    <div class=\"text-md font-semibold\">\n                                        +{{ board.members.slice(5).length }}\n                                    </div>\n                                </div>\n                            </ng-container>\n                        </div>\n                    </ng-container>\n                    <!-- Last activity -->\n                    <div class=\"flex items-center mt-4 text-md font-md\">\n                        <div class=\"text-secondary\">Edited:</div>\n                        <div class=\"ml-1\">{{formatDateAsRelative(board.lastActivity)}}</div>\n                    </div>\n                </a>\n            </ng-container>\n            <!-- New board -->\n            <div class=\"flex flex-col items-center justify-center w-56 rounded-lg cursor-pointer border-2 border-gray-300 border-dashed hover:bg-hover transition-colors duration-150 ease-in-out\">\n                <mat-icon\n                    class=\"icon-size-12 text-hint\"\n                    [svgIcon]=\"'heroicons_outline:plus'\"></mat-icon>\n            </div>\n        </div>\n\n    </div>\n\n</div>\n\n\n","import { ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ScrumboardCardDetailsComponent } from 'app/modules/admin/apps/scrumboard/card/details/details.component';\n\n@Component({\n    selector       : 'scrumboard-card',\n    templateUrl    : './card.component.html',\n    encapsulation  : ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    standalone     : true,\n})\nexport class ScrumboardCardComponent implements OnInit\n{\n    /**\n     * Constructor\n     */\n    constructor(\n        private _activatedRoute: ActivatedRoute,\n        private _matDialog: MatDialog,\n        private _router: Router,\n    )\n    {\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        // Launch the modal\n        this._matDialog.open(ScrumboardCardDetailsComponent, {autoFocus: false})\n            .afterClosed()\n            .subscribe(() =>\n            {\n                // Go up twice because card routes are set up like this; \"card/CARD_ID\"\n                this._router.navigate(['./../..'], {relativeTo: this._activatedRoute});\n            });\n    }\n}\n","SCRUMBOARD -> BOARDS -> LIST -> CARD\n","import { TextFieldModule } from '@angular/cdk/text-field';\nimport { DatePipe, NgClass, NgFor, NgIf } from '@angular/common';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, OnDestroy, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule, UntypedFormBuilder, UntypedFormGroup, Validators } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxChange, MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { Board, Card, Label } from 'app/modules/admin/apps/scrumboard/scrumboard.models';\nimport { ScrumboardService } from 'app/modules/admin/apps/scrumboard/scrumboard.service';\nimport { assign } from 'lodash-es';\nimport { DateTime } from 'luxon';\nimport { debounceTime, Subject, takeUntil, tap } from 'rxjs';\n\n@Component({\n    selector       : 'scrumboard-card-details',\n    templateUrl    : './details.component.html',\n    encapsulation  : ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    standalone     : true,\n    imports        : [MatButtonModule, MatIconModule, FormsModule, ReactiveFormsModule, MatFormFieldModule, MatInputModule, TextFieldModule, NgClass, NgIf, MatDatepickerModule, NgFor, MatCheckboxModule, DatePipe],\n})\nexport class ScrumboardCardDetailsComponent implements OnInit, OnDestroy\n{\n    @ViewChild('labelInput') labelInput: ElementRef<HTMLInputElement>;\n    board: Board;\n    card: Card;\n    cardForm: UntypedFormGroup;\n    labels: Label[];\n    filteredLabels: Label[];\n\n    // Private\n    private _unsubscribeAll: Subject<any> = new Subject<any>();\n\n    /**\n     * Constructor\n     */\n    constructor(\n        public matDialogRef: MatDialogRef<ScrumboardCardDetailsComponent>,\n        private _changeDetectorRef: ChangeDetectorRef,\n        private _formBuilder: UntypedFormBuilder,\n        private _scrumboardService: ScrumboardService,\n    )\n    {\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        // Get the board\n        this._scrumboardService.board$\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe((board) =>\n            {\n                // Board data\n                this.board = board;\n\n                // Get the labels\n                this.labels = this.filteredLabels = board.labels;\n            });\n\n        // Get the card details\n        this._scrumboardService.card$\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe((card) =>\n            {\n                this.card = card;\n            });\n\n        // Prepare the card form\n        this.cardForm = this._formBuilder.group({\n            id         : [''],\n            title      : ['', Validators.required],\n            description: [''],\n            labels     : [[]],\n            dueDate    : [null],\n        });\n\n        // Fill the form\n        this.cardForm.setValue({\n            id         : this.card.id,\n            title      : this.card.title,\n            description: this.card.description,\n            labels     : this.card.labels,\n            dueDate    : this.card.dueDate,\n        });\n\n        // Update card when there is a value change on the card form\n        this.cardForm.valueChanges\n            .pipe(\n                tap((value) =>\n                {\n                    // Update the card object\n                    this.card = assign(this.card, value);\n                }),\n                debounceTime(300),\n                takeUntil(this._unsubscribeAll),\n            )\n            .subscribe((value) =>\n            {\n                // Update the card on the server\n                this._scrumboardService.updateCard(value.id, value).subscribe();\n\n                // Mark for check\n                this._changeDetectorRef.markForCheck();\n            });\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void\n    {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next(null);\n        this._unsubscribeAll.complete();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Return whether the card has the given label\n     *\n     * @param label\n     */\n    hasLabel(label: Label): boolean\n    {\n        return !!this.card.labels.find(cardLabel => cardLabel.id === label.id);\n    }\n\n    /**\n     * Filter labels\n     *\n     * @param event\n     */\n    filterLabels(event): void\n    {\n        // Get the value\n        const value = event.target.value.toLowerCase();\n\n        // Filter the labels\n        this.filteredLabels = this.labels.filter(label => label.title.toLowerCase().includes(value));\n    }\n\n    /**\n     * Filter labels input key down event\n     *\n     * @param event\n     */\n    filterLabelsInputKeyDown(event): void\n    {\n        // Return if the pressed key is not 'Enter'\n        if ( event.key !== 'Enter' )\n        {\n            return;\n        }\n\n        // If there is no label available...\n        if ( this.filteredLabels.length === 0 )\n        {\n            // Return\n            return;\n        }\n\n        // If there is a label...\n        const label = this.filteredLabels[0];\n        const isLabelApplied = this.card.labels.find(cardLabel => cardLabel.id === label.id);\n\n        // If the found label is already applied to the card...\n        if ( isLabelApplied )\n        {\n            // Remove the label from the card\n            this.removeLabelFromCard(label);\n        }\n        else\n        {\n            // Otherwise add the label to the card\n            this.addLabelToCard(label);\n        }\n    }\n\n    /**\n     * Toggle card label\n     *\n     * @param label\n     * @param change\n     */\n    toggleProductTag(label: Label, change: MatCheckboxChange): void\n    {\n        if ( change.checked )\n        {\n            this.addLabelToCard(label);\n        }\n        else\n        {\n            this.removeLabelFromCard(label);\n        }\n    }\n\n    /**\n     * Add label to the card\n     *\n     * @param label\n     */\n    addLabelToCard(label: Label): void\n    {\n        // Add the label\n        this.card.labels.unshift(label);\n\n        // Update the card form data\n        this.cardForm.get('labels').patchValue(this.card.labels);\n\n        // Mark for check\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Remove label from the card\n     *\n     * @param label\n     */\n    removeLabelFromCard(label: Label): void\n    {\n        // Remove the label\n        this.card.labels.splice(this.card.labels.findIndex(cardLabel => cardLabel.id === label.id), 1);\n\n        // Update the card form data\n        this.cardForm.get('labels').patchValue(this.card.labels);\n\n        // Mark for check\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Check if the given date is overdue\n     */\n    isOverdue(date: string): boolean\n    {\n        return DateTime.fromISO(date).startOf('day') < DateTime.now().startOf('day');\n    }\n\n    /**\n     * Track by function for ngFor loops\n     *\n     * @param index\n     * @param item\n     */\n    trackByFn(index: number, item: any): any\n    {\n        return item.id || index;\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Private methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Read the given file for demonstration purposes\n     *\n     * @param file\n     */\n    private _readAsDataURL(file: File): Promise<any>\n    {\n        // Return a new promise\n        return new Promise((resolve, reject) =>\n        {\n            // Create a new reader\n            const reader = new FileReader();\n\n            // Resolve the promise on success\n            reader.onload = (): void =>\n            {\n                resolve(reader.result);\n            };\n\n            // Reject the promise on error\n            reader.onerror = (e): void =>\n            {\n                reject(e);\n            };\n\n            // Read the file as the\n            reader.readAsDataURL(file);\n        });\n    }\n}\n","<div class=\"flex flex-col flex-auto md:w-160 md:min-w-160 max-h-160 -m-6 overflow-y-auto\">\n\n    <!-- Header -->\n    <div class=\"flex flex-0 items-center justify-between h-16 pr-3 sm:pr-5 pl-6 sm:pl-8 bg-primary text-on-primary\">\n        <div class=\"text-lg font-medium\">Card</div>\n        <button\n            mat-icon-button\n            (click)=\"matDialogRef.close()\"\n            [tabIndex]=\"-1\">\n            <mat-icon\n                class=\"text-current\"\n                [svgIcon]=\"'heroicons_outline:x-mark'\"></mat-icon>\n        </button>\n    </div>\n\n    <!-- Card form -->\n    <form\n        class=\"flex flex-col flex-0 items-start w-full p-6 sm:p-8 space-y-6 overflow-y-auto\"\n        [formGroup]=\"cardForm\">\n\n        <!-- Title -->\n        <mat-form-field\n            class=\"w-full\"\n            [subscriptSizing]=\"'dynamic'\">\n            <mat-label>Title</mat-label>\n            <textarea\n                matInput\n                [formControlName]=\"'title'\"\n                [rows]=\"1\"\n                cdkTextareaAutosize\n                [cdkAutosizeMinRows]=\"1\">\n            </textarea>\n        </mat-form-field>\n\n        <!-- Description -->\n        <mat-form-field\n            class=\"w-full\"\n            [subscriptSizing]=\"'dynamic'\">\n            <mat-label>Description</mat-label>\n            <textarea\n                matInput\n                [formControlName]=\"'description'\"\n                [rows]=\"1\"\n                cdkTextareaAutosize\n                [cdkAutosizeMinRows]=\"1\">\n            </textarea>\n        </mat-form-field>\n\n        <!-- Due date -->\n        <div>\n            <div class=\"font-medium\">Due date</div>\n            <div\n                class=\"relative flex items-center mt-1.5 px-4 leading-9 rounded-full cursor-pointer\"\n                [ngClass]=\"{'text-gray-500 bg-gray-100 dark:text-gray-300 dark:bg-gray-700': !card.dueDate,\n                            'text-green-800 bg-green-200 dark:text-green-100 dark:bg-green-500': card.dueDate && !isOverdue(card.dueDate),\n                            'text-red-800 bg-red-200 dark:text-red-100 dark:bg-red-500': card.dueDate && isOverdue(card.dueDate)}\"\n                (click)=\"dueDatePicker.open()\">\n                <mat-icon\n                    class=\"icon-size-5 text-current\"\n                    [svgIcon]=\"'heroicons_solid:calendar'\"></mat-icon>\n                <span class=\"ml-2 text-md font-medium\">\n                    <ng-container *ngIf=\"card.dueDate\">{{card.dueDate | date:'longDate'}}</ng-container>\n                    <ng-container *ngIf=\"!card.dueDate\">Not set</ng-container>\n                </span>\n                <mat-form-field\n                    class=\"fuse-mat-dense invisible absolute inset-0 -mt-2.5 opacity-0 pointer-events-none\"\n                    [subscriptSizing]=\"'dynamic'\">\n                    <input\n                        matInput\n                        [formControlName]=\"'dueDate'\"\n                        [matDatepicker]=\"dueDatePicker\">\n                    <mat-datepicker #dueDatePicker>\n                        <mat-datepicker-actions>\n                            <button\n                                mat-button\n                                (click)=\"cardForm.get('dueDate').setValue(null)\"\n                                matDatepickerCancel>\n                                Clear\n                            </button>\n                            <button\n                                mat-flat-button\n                                [color]=\"'primary'\"\n                                matDatepickerApply>\n                                Select\n                            </button>\n                        </mat-datepicker-actions>\n                    </mat-datepicker>\n                </mat-form-field>\n            </div>\n        </div>\n\n        <!-- Labels -->\n        <div class=\"w-full\">\n            <div class=\"font-medium\">Labels</div>\n            <div class=\"mt-1 rounded-md border border-gray-300 shadow-sm overflow-hidden\">\n                <!-- Header -->\n                <div class=\"flex items-center my-2 mx-3\">\n                    <div class=\"flex items-center flex-auto min-w-0\">\n                        <mat-icon\n                            class=\"icon-size-5\"\n                            [svgIcon]=\"'heroicons_solid:magnifying-glass'\"></mat-icon>\n                        <input\n                            class=\"min-w-0 ml-2 py-1 border-0\"\n                            type=\"text\"\n                            placeholder=\"Enter label name\"\n                            (input)=\"filterLabels($event)\"\n                            (keydown)=\"filterLabelsInputKeyDown($event)\"\n                            [maxLength]=\"50\">\n                    </div>\n                </div>\n                <!-- Available labels -->\n                <div class=\"max-h-40 leading-none overflow-y-auto border-t\">\n                    <!-- Labels -->\n                    <ng-container *ngFor=\"let label of filteredLabels; trackBy: trackByFn\">\n                        <mat-checkbox\n                            class=\"flex items-center h-10 min-h-10 pl-1 pr-4\"\n                            [color]=\"'primary'\"\n                            [checked]=\"hasLabel(label)\"\n                            (change)=\"toggleProductTag(label, $event)\">\n                            {{label.title}}\n                        </mat-checkbox>\n                    </ng-container>\n                </div>\n            </div>\n        </div>\n\n    </form>\n</div>\n","import { IBoard, ICard, ILabel, IList, IMember } from 'app/modules/admin/apps/scrumboard/scrumboard.types';\n\n// -----------------------------------------------------------------------------------------------------\n// @ Board\n// -----------------------------------------------------------------------------------------------------\nexport class Board implements Required<IBoard>\n{\n    id: string | null;\n    title: string;\n    description: string | null;\n    icon: string | null;\n    lastActivity: string | null;\n    lists: List[];\n    labels: Label[];\n    members: Member[];\n\n    /**\n     * Constructor\n     */\n    constructor(board: IBoard)\n    {\n        this.id = board.id || null;\n        this.title = board.title;\n        this.description = board.description || null;\n        this.icon = board.icon || null;\n        this.lastActivity = board.lastActivity || null;\n        this.lists = [];\n        this.labels = [];\n        this.members = [];\n\n        // Lists\n        if ( board.lists )\n        {\n            this.lists = board.lists.map((list) =>\n            {\n                if ( !(list instanceof List) )\n                {\n                    return new List(list);\n                }\n\n                return list;\n            });\n        }\n\n        // Labels\n        if ( board.labels )\n        {\n            this.labels = board.labels.map((label) =>\n            {\n                if ( !(label instanceof Label) )\n                {\n                    return new Label(label);\n                }\n\n                return label;\n            });\n        }\n\n        // Members\n        if ( board.members )\n        {\n            this.members = board.members.map((member) =>\n            {\n                if ( !(member instanceof Member) )\n                {\n                    return new Member(member);\n                }\n\n                return member;\n            });\n        }\n    }\n}\n\n// -----------------------------------------------------------------------------------------------------\n// @ List\n// -----------------------------------------------------------------------------------------------------\nexport class List implements Required<IList>\n{\n    id: string | null;\n    boardId: string;\n    position: number;\n    title: string;\n    cards: Card[];\n\n    /**\n     * Constructor\n     */\n    constructor(list: IList)\n    {\n        this.id = list.id || null;\n        this.boardId = list.boardId;\n        this.position = list.position;\n        this.title = list.title;\n        this.cards = [];\n\n        // Cards\n        if ( list.cards )\n        {\n            this.cards = list.cards.map((card) =>\n            {\n                if ( !(card instanceof Card) )\n                {\n                    return new Card(card);\n                }\n\n                return card;\n            });\n        }\n    }\n}\n\n// -----------------------------------------------------------------------------------------------------\n// @ Card\n// -----------------------------------------------------------------------------------------------------\nexport class Card implements Required<ICard>\n{\n    id: string | null;\n    boardId: string;\n    listId: string;\n    position: number;\n    title: string;\n    description: string | null;\n    labels: Label[];\n    dueDate: string | null;\n\n    /**\n     * Constructor\n     */\n    constructor(card: ICard)\n    {\n        this.id = card.id || null;\n        this.boardId = card.boardId;\n        this.listId = card.listId;\n        this.position = card.position;\n        this.title = card.title;\n        this.description = card.description || null;\n        this.labels = [];\n        this.dueDate = card.dueDate || null;\n\n        // Labels\n        if ( card.labels )\n        {\n            this.labels = card.labels.map((label) =>\n            {\n                if ( !(label instanceof Label) )\n                {\n                    return new Label(label);\n                }\n\n                return label;\n            });\n        }\n    }\n}\n\n// -----------------------------------------------------------------------------------------------------\n// @ Member\n// -----------------------------------------------------------------------------------------------------\nexport class Member implements Required<IMember>\n{\n    id: string | null;\n    name: string;\n    avatar: string | null;\n\n    /**\n     * Constructor\n     */\n    constructor(member: IMember)\n    {\n        this.id = member.id || null;\n        this.name = member.name;\n        this.avatar = member.avatar || null;\n    }\n}\n\n// -----------------------------------------------------------------------------------------------------\n// @ Label\n// -----------------------------------------------------------------------------------------------------\nexport class Label implements Required<ILabel>\n{\n    id: string | null;\n    boardId: string;\n    title: string;\n\n    /**\n     * Constructor\n     */\n    constructor(label: ILabel)\n    {\n        this.id = label.id || null;\n        this.boardId = label.boardId;\n        this.title = label.title;\n    }\n}\n","import { inject } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot, Routes } from '@angular/router';\nimport { ScrumboardBoardComponent } from 'app/modules/admin/apps/scrumboard/board/board.component';\nimport { ScrumboardBoardsComponent } from 'app/modules/admin/apps/scrumboard/boards/boards.component';\nimport { ScrumboardCardComponent } from 'app/modules/admin/apps/scrumboard/card/card.component';\nimport { Board } from 'app/modules/admin/apps/scrumboard/scrumboard.models';\nimport { ScrumboardService } from 'app/modules/admin/apps/scrumboard/scrumboard.service';\nimport { catchError, Observable, throwError } from 'rxjs';\n\n/**\n * Board resolver\n *\n * @param route\n * @param state\n */\nconst boardResolver = (route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Board> =>\n{\n    const scrumboardService = inject(ScrumboardService);\n    const router = inject(Router);\n\n    return scrumboardService.getBoard(route.paramMap.get('boardId'))\n        .pipe(\n            // Error here means the requested board is not available\n            catchError((error) =>\n            {\n                // Log the error\n                console.error(error);\n\n                // Get the parent url\n                const parentUrl = state.url.split('/').slice(0, -1).join('/');\n\n                // Navigate to there\n                router.navigateByUrl(parentUrl);\n\n                // Throw an error\n                return throwError(error);\n            }),\n        );\n};\n\n/**\n * Card resolver\n *\n * @param route\n * @param state\n */\nconst cardResolver = (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) =>\n{\n    const scrumboardService = inject(ScrumboardService);\n    const router = inject(Router);\n\n    return scrumboardService.getCard(route.paramMap.get('cardId'))\n        .pipe(\n            // Error here means the requested card is not available\n            catchError((error) =>\n            {\n                // Log the error\n                console.error(error);\n\n                // Get the parent url\n                const parentUrl = state.url.split('/').slice(0, -1).join('/');\n\n                // Navigate to there\n                router.navigateByUrl(parentUrl);\n\n                // Throw an error\n                return throwError(error);\n            }),\n        );\n};\n\nexport default [\n    {\n        path     : '',\n        component: ScrumboardBoardsComponent,\n        resolve  : {\n            boards: () => inject(ScrumboardService).getBoards(),\n        },\n    },\n    {\n        path     : ':boardId',\n        component: ScrumboardBoardComponent,\n        resolve  : {\n            board: boardResolver,\n        },\n        children : [\n            {\n                path     : 'card/:cardId',\n                component: ScrumboardCardComponent,\n                resolve  : {\n                    card: cardResolver,\n                },\n            },\n        ],\n    },\n] as Routes;\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Board, Card, Label, List } from 'app/modules/admin/apps/scrumboard/scrumboard.models';\nimport { BehaviorSubject, map, Observable, of, switchMap, take, tap, throwError } from 'rxjs';\n\n@Injectable({providedIn: 'root'})\nexport class ScrumboardService\n{\n    // Private\n    private _board: BehaviorSubject<Board | null>;\n    private _boards: BehaviorSubject<Board[] | null>;\n    private _card: BehaviorSubject<Card | null>;\n\n    /**\n     * Constructor\n     */\n    constructor(\n        private _httpClient: HttpClient,\n    )\n    {\n        // Set the private defaults\n        this._board = new BehaviorSubject(null);\n        this._boards = new BehaviorSubject(null);\n        this._card = new BehaviorSubject(null);\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Accessors\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Getter for board\n     */\n    get board$(): Observable<Board>\n    {\n        return this._board.asObservable();\n    }\n\n    /**\n     * Getter for boards\n     */\n    get boards$(): Observable<Board[]>\n    {\n        return this._boards.asObservable();\n    }\n\n    /**\n     * Getter for card\n     */\n    get card$(): Observable<Card>\n    {\n        return this._card.asObservable();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Get boards\n     */\n    getBoards(): Observable<Board[]>\n    {\n        return this._httpClient.get<Board[]>('api/apps/scrumboard/boards').pipe(\n            map(response => response.map(item => new Board(item))),\n            tap(boards => this._boards.next(boards)),\n        );\n    }\n\n    /**\n     * Get board\n     *\n     * @param id\n     */\n    getBoard(id: string): Observable<Board>\n    {\n        return this._httpClient.get<Board>('api/apps/scrumboard/board', {params: {id}}).pipe(\n            map(response => new Board(response)),\n            tap(board => this._board.next(board)),\n        );\n    }\n\n    /**\n     * Create board\n     *\n     * @param board\n     */\n    createBoard(board: Board): Observable<Board>\n    {\n        return this.boards$.pipe(\n            take(1),\n            switchMap(boards => this._httpClient.put<Board>('api/apps/scrumboard/board', {board}).pipe(\n                map((newBoard) =>\n                {\n                    // Update the boards with the new board\n                    this._boards.next([...boards, newBoard]);\n\n                    // Return new board from observable\n                    return newBoard;\n                }),\n            )),\n        );\n    }\n\n    /**\n     * Update the board\n     *\n     * @param id\n     * @param board\n     */\n    updateBoard(id: string, board: Board): Observable<Board>\n    {\n        return this.boards$.pipe(\n            take(1),\n            switchMap(boards => this._httpClient.patch<Board>('api/apps/scrumboard/board', {\n                id,\n                board,\n            }).pipe(\n                map((updatedBoard) =>\n                {\n                    // Find the index of the updated board\n                    const index = boards.findIndex(item => item.id === id);\n\n                    // Update the board\n                    boards[index] = updatedBoard;\n\n                    // Update the boards\n                    this._boards.next(boards);\n\n                    // Return the updated board\n                    return updatedBoard;\n                }),\n            )),\n        );\n    }\n\n    /**\n     * Delete the board\n     *\n     * @param id\n     */\n    deleteBoard(id: string): Observable<boolean>\n    {\n        return this.boards$.pipe(\n            take(1),\n            switchMap(boards => this._httpClient.delete('api/apps/scrumboard/board', {params: {id}}).pipe(\n                map((isDeleted: boolean) =>\n                {\n                    // Find the index of the deleted board\n                    const index = boards.findIndex(item => item.id === id);\n\n                    // Delete the board\n                    boards.splice(index, 1);\n\n                    // Update the boards\n                    this._boards.next(boards);\n\n                    // Update the board\n                    this._board.next(null);\n\n                    // Update the card\n                    this._card.next(null);\n\n                    // Return the deleted status\n                    return isDeleted;\n                }),\n            )),\n        );\n    }\n\n    /**\n     * Create list\n     *\n     * @param list\n     */\n    createList(list: List): Observable<List>\n    {\n        return this._httpClient.post<List>('api/apps/scrumboard/board/list', {list}).pipe(\n            map(response => new List(response)),\n            tap((newList) =>\n            {\n                // Get the board value\n                const board = this._board.value;\n\n                // Update the board lists with the new list\n                board.lists = [...board.lists, newList];\n\n                // Sort the board lists\n                board.lists.sort((a, b) => a.position - b.position);\n\n                // Update the board\n                this._board.next(board);\n            }),\n        );\n    }\n\n    /**\n     * Update the list\n     *\n     * @param list\n     */\n    updateList(list: List): Observable<List>\n    {\n        return this._httpClient.patch<List>('api/apps/scrumboard/board/list', {list}).pipe(\n            map(response => new List(response)),\n            tap((updatedList) =>\n            {\n                // Get the board value\n                const board = this._board.value;\n\n                // Find the index of the updated list\n                const index = board.lists.findIndex(item => item.id === list.id);\n\n                // Update the list\n                board.lists[index] = updatedList;\n\n                // Sort the board lists\n                board.lists.sort((a, b) => a.position - b.position);\n\n                // Update the board\n                this._board.next(board);\n            }),\n        );\n    }\n\n    /**\n     * Update the lists\n     *\n     * @param lists\n     */\n    updateLists(lists: List[]): Observable<List[]>\n    {\n        return this._httpClient.patch<List[]>('api/apps/scrumboard/board/lists', {lists}).pipe(\n            map(response => response.map(item => new List(item))),\n            tap((updatedLists) =>\n            {\n                // Get the board value\n                const board = this._board.value;\n\n                // Go through the updated lists\n                updatedLists.forEach((updatedList) =>\n                {\n                    // Find the index of the updated list\n                    const index = board.lists.findIndex(item => item.id === updatedList.id);\n\n                    // Update the list\n                    board.lists[index] = updatedList;\n                });\n\n                // Sort the board lists\n                board.lists.sort((a, b) => a.position - b.position);\n\n                // Update the board\n                this._board.next(board);\n            }),\n        );\n    }\n\n    /**\n     * Delete the list\n     *\n     * @param id\n     */\n    deleteList(id: string): Observable<boolean>\n    {\n        return this._httpClient.delete<boolean>('api/apps/scrumboard/board/list', {params: {id}}).pipe(\n            tap((isDeleted) =>\n            {\n                // Get the board value\n                const board = this._board.value;\n\n                // Find the index of the deleted list\n                const index = board.lists.findIndex(item => item.id === id);\n\n                // Delete the list\n                board.lists.splice(index, 1);\n\n                // Sort the board lists\n                board.lists.sort((a, b) => a.position - b.position);\n\n                // Update the board\n                this._board.next(board);\n            }),\n        );\n    }\n\n    /**\n     * Get card\n     */\n    getCard(id: string): Observable<Card>\n    {\n        return this._board.pipe(\n            take(1),\n            map((board) =>\n            {\n                // Find the card\n                const card = board.lists.find(list => list.cards.some(item => item.id === id))\n                    .cards.find(item => item.id === id);\n\n                // Update the card\n                this._card.next(card);\n\n                // Return the card\n                return card;\n            }),\n            switchMap((card) =>\n            {\n                if ( !card )\n                {\n                    return throwError('Could not found the card with id of ' + id + '!');\n                }\n\n                return of(card);\n            }),\n        );\n    }\n\n    /**\n     * Create card\n     *\n     * @param card\n     */\n    createCard(card: Card): Observable<Card>\n    {\n        return this._httpClient.put<Card>('api/apps/scrumboard/board/card', {card}).pipe(\n            map(response => new Card(response)),\n            tap((newCard) =>\n            {\n                // Get the board value\n                const board = this._board.value;\n\n                // Find the list and push the new card in it\n                board.lists.forEach((listItem, index, list) =>\n                {\n                    if ( listItem.id === newCard.listId )\n                    {\n                        list[index].cards.push(newCard);\n                    }\n                });\n\n                // Update the board\n                this._board.next(board);\n\n                // Return the new card\n                return newCard;\n            }),\n        );\n    }\n\n    /**\n     * Update the card\n     *\n     * @param id\n     * @param card\n     */\n    updateCard(id: string, card: Card): Observable<Card>\n    {\n        return this.board$.pipe(\n            take(1),\n            switchMap(board => this._httpClient.patch<Card>('api/apps/scrumboard/board/card', {\n                id,\n                card,\n            }).pipe(\n                map((updatedCard) =>\n                {\n                    // Find the card and update it\n                    board.lists.forEach((listItem) =>\n                    {\n                        listItem.cards.forEach((cardItem, index, array) =>\n                        {\n                            if ( cardItem.id === id )\n                            {\n                                array[index] = updatedCard;\n                            }\n                        });\n                    });\n\n                    // Update the board\n                    this._board.next(board);\n\n                    // Update the card\n                    this._card.next(updatedCard);\n\n                    // Return the updated card\n                    return updatedCard;\n                }),\n            )),\n        );\n    }\n\n    /**\n     * Update the cards\n     *\n     * @param cards\n     */\n    updateCards(cards: Card[]): Observable<Card[]>\n    {\n        return this._httpClient.patch<Card[]>('api/apps/scrumboard/board/cards', {cards}).pipe(\n            map(response => response.map(item => new Card(item))),\n            tap((updatedCards) =>\n            {\n                // Get the board value\n                const board = this._board.value;\n\n                // Go through the updated cards\n                updatedCards.forEach((updatedCard) =>\n                {\n                    // Find the index of the updated card's list\n                    const listIndex = board.lists.findIndex(list => list.id === updatedCard.listId);\n\n                    // Find the index of the updated card\n                    const cardIndex = board.lists[listIndex].cards.findIndex(item => item.id === updatedCard.id);\n\n                    // Update the card\n                    board.lists[listIndex].cards[cardIndex] = updatedCard;\n\n                    // Sort the cards\n                    board.lists[listIndex].cards.sort((a, b) => a.position - b.position);\n                });\n\n                // Update the board\n                this._board.next(board);\n            }),\n        );\n    }\n\n    /**\n     * Delete the card\n     *\n     * @param id\n     */\n    deleteCard(id: string): Observable<boolean>\n    {\n        return this.board$.pipe(\n            take(1),\n            switchMap(board => this._httpClient.delete('api/apps/scrumboard/board/card', {params: {id}}).pipe(\n                map((isDeleted: boolean) =>\n                {\n                    // Find the card and delete it\n                    board.lists.forEach((listItem) =>\n                    {\n                        listItem.cards.forEach((cardItem, index, array) =>\n                        {\n                            if ( cardItem.id === id )\n                            {\n                                array.splice(index, 1);\n                            }\n                        });\n                    });\n\n                    // Update the board\n                    this._board.next(board);\n\n                    // Update the card\n                    this._card.next(null);\n\n                    // Return the deleted status\n                    return isDeleted;\n                }),\n            )),\n        );\n    }\n\n    /**\n     * Create label\n     *\n     * @param label\n     */\n    createLabel(label: Label): Observable<Label>\n    {\n        return this.board$.pipe(\n            take(1),\n            switchMap(board => this._httpClient.post<Label>('api/apps/scrumboard/board/label', {label}).pipe(\n                map((newLabel) =>\n                {\n                    // Update the board labels with the new label\n                    board.labels = [...board.labels, newLabel];\n\n                    // Update the board\n                    this._board.next(board);\n\n                    // Return new label from observable\n                    return newLabel;\n                }),\n            )),\n        );\n    }\n\n    /**\n     * Update the label\n     *\n     * @param id\n     * @param label\n     */\n    updateLabel(id: string, label: Label): Observable<Label>\n    {\n        return this.board$.pipe(\n            take(1),\n            switchMap(board => this._httpClient.patch<Label>('api/apps/scrumboard/board/label', {\n                id,\n                label,\n            }).pipe(\n                map((updatedLabel) =>\n                {\n                    // Find the index of the updated label\n                    const index = board.labels.findIndex(item => item.id === id);\n\n                    // Update the label\n                    board.labels[index] = updatedLabel;\n\n                    // Update the board\n                    this._board.next(board);\n\n                    // Return the updated label\n                    return updatedLabel;\n                }),\n            )),\n        );\n    }\n\n    /**\n     * Delete the label\n     *\n     * @param id\n     */\n    deleteLabel(id: string): Observable<boolean>\n    {\n        return this.board$.pipe(\n            take(1),\n            switchMap(board => this._httpClient.delete('api/apps/scrumboard/board/label', {params: {id}}).pipe(\n                map((isDeleted: boolean) =>\n                {\n                    // Find the index of the deleted label\n                    const index = board.labels.findIndex(item => item.id === id);\n\n                    // Delete the label\n                    board.labels.splice(index, 1);\n\n                    // If the label is deleted...\n                    if ( isDeleted )\n                    {\n                        // Remove the label from any card that uses it\n                        board.lists.forEach((list) =>\n                        {\n                            list.cards.forEach((card) =>\n                            {\n                                const labelIndex = card.labels.findIndex(label => label.id === id);\n                                if ( labelIndex > -1 )\n                                {\n                                    card.labels.splice(labelIndex, 1);\n                                }\n                            });\n                        });\n                    }\n\n                    // Update the board\n                    this._board.next(board);\n\n                    // Return the deleted status\n                    return isDeleted;\n                }),\n            )),\n        );\n    }\n\n    /**\n     * Search within board cards\n     *\n     * @param query\n     */\n    search(query: string): Observable<Card[] | null>\n    {\n        // @TODO: Update the board cards based on the search results\n        return this._httpClient.get<Card[] | null>('api/apps/scrumboard/board/search', {params: {query}});\n    }\n}\n"],"names":["TextFieldModule","NgClass","EventEmitter","FormsModule","ReactiveFormsModule","MatButtonModule","MatIconModule","ScrumboardBoardAddCardComponent","constructor","_changeDetectorRef","_formBuilder","buttonTitle","saved","formVisible","ngOnInit","form","group","title","save","get","value","trim","next","setValue","setTimeout","titleInput","nativeElement","titleAutosize","reset","markForCheck","toggleFormVisibility","focus","_","i0","ɵɵdirectiveInject","ChangeDetectorRef","i1","UntypedFormBuilder","_2","selectors","viewQuery","ScrumboardBoardAddCardComponent_Query","rf","ctx","ɵɵelementStart","ɵɵlistener","ScrumboardBoardAddCardComponent_Template_button_click_2_listener","ɵɵelement","ɵɵtext","ɵɵelementEnd","ScrumboardBoardAddCardComponent_Template_textarea_keydown_enter_8_listener","ScrumboardBoardAddCardComponent_Template_button_click_13_listener","ScrumboardBoardAddCardComponent_Template_button_click_15_listener","ɵɵclassProp","ɵɵadvance","ɵɵproperty","ɵɵpureFunction1","_c2","ɵɵtextInterpolate","_c3","i2","MatButton","MatIconButton","i3","MatIcon","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","FormGroupDirective","FormControlName","i4","CdkTextareaAutosize","encapsulation","changeDetection","ScrumboardBoardAddListComponent","ScrumboardBoardAddListComponent_Query","ScrumboardBoardAddListComponent_Template_button_click_2_listener","ScrumboardBoardAddListComponent_Template_input_keydown_enter_7_listener","ScrumboardBoardAddListComponent_Template_button_click_10_listener","ScrumboardBoardAddListComponent_Template_button_click_12_listener","_c1","CdkDrag","CdkDragHandle","CdkDropList","CdkDropListGroup","moveItemInArray","transferArrayItem","CdkScrollable","DatePipe","NgFor","NgIf","MatMenuModule","RouterLink","RouterOutlet","Card","List","DateTime","Subject","takeUntil","ɵɵelementContainerStart","ɵɵelementContainerEnd","card_r5","coverImage","ɵɵsanitizeUrl","ɵɵtextInterpolate1","label_r11","ɵɵtemplate","ScrumboardBoardComponent_ng_container_17_ng_container_21_ng_container_5_ng_container_3_Template","labels","ctx_r7","trackByFn","_c0","ctx_r8","isOverdue","dueDate","ɵɵpipeBind2","ScrumboardBoardComponent_ng_container_17_ng_container_21_ng_container_2_Template","ScrumboardBoardComponent_ng_container_17_ng_container_21_ng_container_5_Template","ScrumboardBoardComponent_ng_container_17_ng_container_21_ng_container_6_Template","id","length","ScrumboardBoardComponent_ng_container_17_Template_input_focusout_4_listener","$event","restoredCtx","ɵɵrestoreView","_r15","list_r1","$implicit","ctx_r14","ɵɵnextContext","ɵɵresetView","updateListTitle","ScrumboardBoardComponent_ng_container_17_Template_input_keydown_enter_4_listener","_r2","ɵɵreference","blur","ScrumboardBoardComponent_ng_container_17_Template_button_click_13_listener","ctx_r17","renameList","ScrumboardBoardComponent_ng_container_17_Template_button_click_16_listener","ctx_r18","deleteList","ScrumboardBoardComponent_ng_container_17_Template_div_cdkDropListDropped_20_listener","ctx_r19","cardDropped","ScrumboardBoardComponent_ng_container_17_ng_container_21_Template","ScrumboardBoardComponent_ng_container_17_Template_scrumboard_board_add_card_saved_22_listener","ctx_r20","addCard","cards","_r3","ctx_r0","ScrumboardBoardComponent","_fuseConfirmationService","_scrumboardService","_positionStep","_maxListCount","_maxPosition","_unsubscribeAll","listTitleForm","board$","pipe","subscribe","board","ngOnDestroy","complete","listTitleInput","addList","lists","list","boardId","position","createList","event","element","target","newTitle","updateList","confirmation","open","message","actions","confirm","label","afterClosed","result","card","listId","createCard","listDropped","container","data","previousIndex","currentIndex","updated","_calculatePositions","updateLists","previousContainer","updateCards","date","fromISO","startOf","now","index","item","items","currentItem","prevItem","nextItem","Number","isInteger","map","FuseConfirmationService","ScrumboardService","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","ScrumboardBoardComponent_Template","ScrumboardBoardComponent_Template_div_cdkDropListDropped_15_listener","ScrumboardBoardComponent_ng_container_17_Template","ScrumboardBoardComponent_Template_scrumboard_board_add_list_saved_18_listener","ɵɵpureFunction0","MatAnchor","i5","i6","MatMenu","MatMenuItem","MatMenuTrigger","styles","member_r5","avatar","board_r1","members","slice","ScrumboardBoardsComponent_ng_container_5_ng_container_8_ng_container_3_Template","ScrumboardBoardsComponent_ng_container_5_ng_container_8_ng_container_4_Template","ctx_r2","ScrumboardBoardsComponent_ng_container_5_ng_container_8_Template","icon","description","formatDateAsRelative","lastActivity","ScrumboardBoardsComponent","boards$","boards","toRelative","ScrumboardBoardsComponent_Template","ScrumboardBoardsComponent_ng_container_5_Template","ScrumboardCardDetailsComponent","ScrumboardCardComponent","_activatedRoute","_matDialog","_router","autoFocus","navigate","relativeTo","ActivatedRoute","MatDialog","Router","ScrumboardCardComponent_Template","Validators","MatCheckboxModule","MatDatepickerModule","MatFormFieldModule","MatInputModule","assign","debounceTime","tap","ScrumboardCardDetailsComponent_ng_container_43_Template_mat_checkbox_change_1_listener","_r6","label_r4","ctx_r5","toggleProductTag","ctx_r3","hasLabel","matDialogRef","filteredLabels","card$","cardForm","required","valueChanges","updateCard","find","cardLabel","filterLabels","toLowerCase","filter","includes","filterLabelsInputKeyDown","key","isLabelApplied","removeLabelFromCard","addLabelToCard","change","checked","unshift","patchValue","splice","findIndex","_readAsDataURL","file","Promise","resolve","reject","reader","FileReader","onload","onerror","e","readAsDataURL","MatDialogRef","ScrumboardCardDetailsComponent_Query","ScrumboardCardDetailsComponent_Template_button_click_4_listener","close","ScrumboardCardDetailsComponent_Template_div_click_20_listener","_r7","ScrumboardCardDetailsComponent_ng_container_23_Template","ScrumboardCardDetailsComponent_ng_container_24_Template","ScrumboardCardDetailsComponent_Template_button_click_30_listener","ScrumboardCardDetailsComponent_Template_input_input_41_listener","ScrumboardCardDetailsComponent_Template_input_keydown_41_listener","ScrumboardCardDetailsComponent_ng_container_43_Template","ɵɵpureFunction3","MatFormField","MatLabel","i7","MatInput","i8","i9","MatDatepicker","MatDatepickerInput","MatDatepickerActions","MatDatepickerCancel","MatDatepickerApply","i10","MatCheckbox","Board","Label","member","Member","name","inject","catchError","throwError","boardResolver","route","state","scrumboardService","router","getBoard","paramMap","error","console","parentUrl","url","split","join","navigateByUrl","cardResolver","getCard","path","component","getBoards","children","BehaviorSubject","of","switchMap","take","_httpClient","_board","_boards","_card","asObservable","response","params","createBoard","put","newBoard","updateBoard","patch","updatedBoard","deleteBoard","delete","isDeleted","post","newList","sort","a","b","updatedList","updatedLists","forEach","some","newCard","listItem","push","updatedCard","cardItem","array","updatedCards","listIndex","cardIndex","deleteCard","createLabel","newLabel","updateLabel","updatedLabel","deleteLabel","labelIndex","search","query","ɵɵinject","HttpClient","factory","ɵfac","providedIn"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}