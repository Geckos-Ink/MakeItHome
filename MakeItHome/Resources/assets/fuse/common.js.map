{"version":3,"file":"common.js","mappings":";;;;;;;;;;;;;;;AAEA;;;AAQM,MAAOA,iBAAiB;EAE1B;;;EAGAC,YAAA,GAEA;EAEA;;;;;;;EAOAC,SAASA,CAACC,KAAwB,EAAEC,GAAW,EAAEC,MAAa;IAE1D;IACA,IAAKC,KAAK,CAACC,OAAO,CAACJ,KAAK,CAAC,EACzB;MACI,OAAOA,KAAK,CAACK,GAAG,CAACC,IAAI,IAAIJ,MAAM,CAACK,IAAI,CAACC,UAAU,IAAIA,UAAU,CAACP,GAAG,CAAC,KAAKK,IAAI,CAAC,CAAC;;IAGjF;IACA,OAAOJ,MAAM,CAACK,IAAI,CAACC,UAAU,IAAIA,UAAU,CAACP,GAAG,CAAC,KAAKD,KAAK,CAAC;EAC/D;EAAC,QAAAS,CAAA;qBA1BQZ,iBAAiB;EAAA;EAAA,QAAAa,EAAA;;UAAjBb,iBAAiB;IAAAc,IAAA;IAAAC,UAAA;EAAA","sources":["./src/@fuse/pipes/find-by-key/find-by-key.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Finds an object from given source using the given key - value pairs\n */\n@Pipe({\n    name      : 'fuseFindByKey',\n    pure      : false,\n    standalone: true,\n})\nexport class FuseFindByKeyPipe implements PipeTransform\n{\n    /**\n     * Constructor\n     */\n    constructor()\n    {\n    }\n\n    /**\n     * Transform\n     *\n     * @param value A string or an array of strings to find from source\n     * @param key Key of the object property to look for\n     * @param source Array of objects to find from\n     */\n    transform(value: string | string[], key: string, source: any[]): any\n    {\n        // If the given value is an array of strings...\n        if ( Array.isArray(value) )\n        {\n            return value.map(item => source.find(sourceItem => sourceItem[key] === item));\n        }\n\n        // If the value is a string...\n        return source.find(sourceItem => sourceItem[key] === value);\n    }\n}\n"],"names":["FuseFindByKeyPipe","constructor","transform","value","key","source","Array","isArray","map","item","find","sourceItem","_","_2","pure","standalone"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}